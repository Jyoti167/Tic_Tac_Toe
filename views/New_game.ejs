<%- include("header") %>
    <form class="d-block border border-1 container mt-5  w-50 flex-wrap align-items-centre justify-content-centre" action="/result" method="post">
        <a class="d-block  mt-5 text-dark" style="text-decoration:none; font-size: 1.3vmax; font-weight: 500; " href="/logout">
           Log Out </a>

        <a class=" mt-5 text-dark text-center" style="text-decoration:none; font-size: 1.3vmax; font-weight: 500; " href="/newgame">
       go back </a>

        <h1 style="font-weight: 600;font-size: 3vmax;">Game with
            <span id="name"><%= username %></span>
        </h1>
        <button class="btn btn-warning w-100 fs-4 text-light border border-1 align-centre mt-3 mb-3"><span class="info" style="color: blue; font-size: 2vmax; font-weight: 700">Your Turn</span></button>
        <div id="board">
            <input data-index="1" class="tile right-border text-center bottom-border" name="id_1">
            <input data-index="2" class="tile right-border text-center bottom-border" name="id_2">
            <input data-index="3" class="tile bottom-border text-center" name="id_3">
            <input data-index="4" class="tile right-border text-center bottom-border" name="id_4">
            <input data-index="5" class="tile right-border text-center bottom-border" name="id_5">
            <input data-index="6" class="tile bottom-border text-center" name="id_6">
            <input data-index="7" class="tile right-border text-center" name="id_7">
            <input data-index="8" class="tile right-border text-center" name="id_8">
            <input data-index="9" class="tile text-center" name="id_9">
            <div id="strike" class="strike"></div>
        </div>
        <div id="game-over-area" class="hidden">
            <h2 id="game-over-text">Winner is X</h2>
            <button id="play-again">Play Again</button>
        </div>

        <input type="hidden" value="<%= username %>" name="username">
        <input type="hidden" id="result" name="result">
        <input type="hidden" id="index" name="index">

        <button class="btn btn-warning w-100 fs-4 text-light border border-1 align-centre mt-3 mb-3" id="reset">Waiting for you</button>


    </form>

    <%- include("footer")%>
        <style>
            body {
                display: flex;
                flex-direction: column;
                align-items: center;
                background-color: white;
                color: rgb(227, 59, 13);
            }
            
            .tile:nth-child(9) {
                border: 0ch;
            }
            
            .tile:nth-child(3) {
                border-right: 0ch;
            }
            
            .tile:nth-child(6) {
                border-right: 0ch;
            }
            
            #board {
                display: grid;
                grid-template-columns: 100px 100px 100px;
                grid-template-rows: 100px 100px 100px;
                cursor: pointer;
                position: relative;
                margin-left: 20%;
            }
            
            .tile {
                color: currentColor;
                font-size: 2em;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            
            .right-border {
                border-right: 0.2em solid rgb(255, 193, 7);
                border-left: 0ch;
                border-top: 0ch;
                border-bottom: 0ch;
            }
            
            .bottom-border {
                border-bottom: 0.2em solid rgb(255, 193, 7);
                border-left: 0ch;
                border-top: 0ch;
            }
            
            .strike {
                position: absolute;
                background-color: rgb(255, 193, 7);
            }
            
            .strike-row-1 {
                height: 3px;
                width: 50%;
                top: 15%;
            }
            
            .strike-row-2 {
                height: 3px;
                width: 50%;
                top: 48%;
            }
            
            .strike-row-3 {
                height: 3px;
                width: 50%;
                top: 83%;
            }
            
            .strike-column-1 {
                height: 100%;
                width: 3px;
                left: 7.8%;
            }
            
            .strike-column-2 {
                height: 100%;
                width: 3px;
                left: 24.4%;
            }
            
            .strike-column-3 {
                height: 100%;
                width: 3px;
                left: 42%;
            }
            
            .strike-diagonal-1 {
                height: 3px;
                width: 38%;
                top: 50%;
                left: 5%;
                transform: skewY(45deg);
            }
            
            .strike-diagonal-2 {
                height: 3px;
                width: 38%;
                top: 50%;
                left: 5%;
                transform: skewY(-45deg);
            }
            
            h1 {
                color: currentColor;
            }
            
            #game-over-area {
                text-align: center;
                border: rgb(255, 193, 7) 8px solid;
                padding: 50px;
                width: 50%;
                margin-top: 50px;
            }
            
            h2 {
                color: currentColor;
                font-size: 2em;
                margin-top: 0px;
            }
            
            button {
                background-color: transparent;
                color: currentColor;
                border: currentColor 1px solid;
                padding: 10px;
                font-size: 1.5em;
            }
            
            .hidden {
                display: none;
            }
            
            .visible {
                display: block;
            }
            
            .x-hover:hover::after {
                content: "X";
                opacity: 0.4;
                background-color: rgb(255, 193, 7);
            }
            
            .o-hover:hover::after {
                content: "O";
                opacity: 0.4;
                background-color: rgb(255, 193, 7);
            }
        </style>
        <script>
            const object = [];
            const tiles = document.querySelectorAll(".tile");
            const PLAYER_X = "X";
            const PLAYER_O = "O";
            let turn = PLAYER_X;

            const boardState = Array(tiles.length);
            boardState.fill(null);

            //Elements
            const strike = document.getElementById("strike");
            const gameOverArea = document.getElementById("game-over-area");
            const gameOverText = document.getElementById("game-over-text");
            const playAgain = document.getElementById("play-again");
            playAgain.addEventListener("click", startNewGame);

            //Sounds
            const gameOverSound = new Audio("/images/gameover.mp3");
            const clickSound = new Audio("/images/ting.mp3");

            tiles.forEach((tile) => tile.addEventListener("click", tileClick));

            function setHoverText() {
                //remove all hover text
                tiles.forEach((tile) => {
                    tile.classList.remove("x-hover");
                    tile.classList.remove("o-hover");
                });

                const hoverClass = `${turn.toLowerCase()}-hover`;

                tiles.forEach((tile) => {
                    if (tile.innerText == "") {
                        tile.classList.add(hoverClass);
                    }
                });
            }


            setHoverText();

            function update(value) {
                object.push(value);
            }

            function tileClick(event) {
                if (gameOverArea.classList.contains("visible")) {
                    return;
                }

                const tile = event.target;
                const tileNumber = tile.dataset.index;
                if (tile.value != "") {
                    return;
                }

                if (turn === PLAYER_X) {
                    tile.value = PLAYER_X;
                    document.querySelector('.info').innerText = "Their Turn"
                    document.querySelector("#result").value = "Their Turn "
                    document.querySelector("#reset").innerText = "Waiting for him "
                    document.querySelector("#index").value = tile.dataset.index;
                    boardState[tileNumber - 1] = PLAYER_X;

                    turn = PLAYER_O;
                } else {
                    tile.value = PLAYER_O;
                    document.querySelector('.info').innerText = "Your Turn"
                    document.querySelector("#result").value = "Your Turn"
                    document.querySelector("#reset").innerText = "Waiting for you "
                    boardState[tileNumber - 1] = PLAYER_O;

                    turn = PLAYER_X;
                }

                clickSound.play();
                setHoverText();
                checkWinner();
            }

            function checkWinner() {
                //Check for a winner
                for (const winningCombination of winningCombinations) {
                    //Object Destructuring
                    const {
                        combo,
                        strikeClass
                    } = winningCombination;
                    const tileValue1 = boardState[combo[0] - 1];
                    const tileValue2 = boardState[combo[1] - 1];
                    const tileValue3 = boardState[combo[2] - 1];

                    if (
                        tileValue1 != null &&
                        tileValue1 === tileValue2 &&
                        tileValue1 === tileValue3
                    ) {
                        strike.classList.add(strikeClass);
                        gameOverScreen(tileValue1);
                        return;
                    }
                }

                //Check for a draw
                const allTileFilledIn = boardState.every((tile) => tile !== null);
                if (allTileFilledIn) {
                    gameOverScreen(null);
                }
            }

            function gameOverScreen(winnerText) {
                let text = "Draw!";
                let name = document.querySelector("#name").innerText;
                if (winnerText != null) {
                    if (winnerText === PLAYER_X) {
                        document.querySelector('.info').innerText = `You won!`
                        document.querySelector("#result").value = `You won`
                        text = `You won`;
                    } else {
                        if (winnerText === PLAYER_O) {
                            document.querySelector('.info').innerText = `Your Friend won!`
                            document.querySelector("#result").value = `Your Friend won!`
                            text = `Your Friend won!`
                        }
                    }



                    document.querySelector("#reset").innerText = "Start another game "
                }
                document.querySelector("#reset").innerText = "Start another game"
                document.querySelector('.info').innerText = text
                gameOverSound.play();
            }

            function startNewGame() {
                strike.className = "strike";
                gameOverArea.className = "hidden";
                boardState.fill(null);
                tiles.forEach((tile) => (tile.value = ""));
                turn = PLAYER_X;
                setHoverText();
            }

            const winningCombinations = [
                //rows
                {
                    combo: [1, 2, 3],
                    strikeClass: "strike-row-1"
                }, {
                    combo: [4, 5, 6],
                    strikeClass: "strike-row-2"
                }, {
                    combo: [7, 8, 9],
                    strikeClass: "strike-row-3"
                },
                //columns
                {
                    combo: [1, 4, 7],
                    strikeClass: "strike-column-1"
                }, {
                    combo: [2, 5, 8],
                    strikeClass: "strike-column-2"
                }, {
                    combo: [3, 6, 9],
                    strikeClass: "strike-column-3"
                },
                //diagonals
                {
                    combo: [1, 5, 9],
                    strikeClass: "strike-diagonal-1"
                }, {
                    combo: [3, 5, 7],
                    strikeClass: "strike-diagonal-2"
                },
            ];
        </script>